dat<-read.csv(file.choose(), head=T)
str(dat)
# I. Los datos presentan típicamente una sola variable continua y sus entradas (observaciones) pueden o no ordenarse
# de acuerdo a dicha variable continua.
# Para hacer una gráfica de puntos tipo Cleveland se usa geom_point:
ggplot(dat, aes(x=prom, y=semes))+
geom_point()
library(ggplot2)
# I. Los datos presentan típicamente una sola variable continua y sus entradas (observaciones) pueden o no ordenarse
# de acuerdo a dicha variable continua.
# Para hacer una gráfica de puntos tipo Cleveland se usa geom_point:
ggplot(dat, aes(x=prom, y=semes))+
geom_point()
# Para ordenar los puntos de acuerdo a los valores de la variable continua, y cambiar su tamaño:
ggplot(dat, aes(x=prom, y=reorder(semes, prom)))+
geom_point(size=3)
# Para intercambiar los ejes del gráfico, eliminar la cuadrícula del fondo, e inclinar las leyendas del eje x:
ggplot(dat, aes(x=reorder(semes, prom), y=prom))+
geom_point(size=3)+
theme_bw()+
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(colour="grey60", linetype="dashed"),
axis.text.x= element_text(angle=60, hjust=1)
)
# II. Los valores de la variable se pueden agrupar con base en una segunda variable categórica:
ggplot(dat, aes(x=prom, y=semes))+
geom_point(size=3, aes(colour=asign))+
scale_colour_brewer(palette="Set1")
# Para ordenar los puntos de acuerdo a los valores de la variable continua:
ggplot(dat, aes(x=prom, y=reorder(semes, prom)))+
geom_point(size=3, aes(colour=asign))+
scale_colour_brewer(palette="Set1")+
geom_segment(aes(yend=semes),xend=0, colour="grey50")+
theme_bw()+
theme(panel.grid.major.y = element_blank(),
legend.position = c(0.8,0.3)
)
# Para separar los puntos ordenados en grupos de la segunda variable categórica se pueden usar facetas:
ggplot(dat, aes(x=prom, y=reorder(semes, prom)))+
geom_point(size=3, aes(colour=asign))+
geom_segment(aes(yend=semes),xend=0, colour="grey50")+
facet_grid(asign~., scales="free_y", space="free_y")+
theme(legend.position="none")
# III. Otros recursos de aesthetics para agrupar los valores con base en una tercera variable categórica:
ggplot(dat, aes(x=prom, y=reorder(semes, prom)))+
geom_point(size=3, aes(shape=didac, colour=didac))+
geom_segment(aes(yend=semes),xend=0, colour="grey50")+
facet_grid(asign~., scales="free_y", space="free_y")+
theme_bw()+
theme(panel.grid.major.y = element_blank(),
legend.position = c(0.9,0.2),
legend.justification= c(1, 0.5)
)
# III. Otros recursos de aesthetics para agrupar los valores con base en una tercera variable categórica:
ggplot(dat, aes(x=prom, y=reorder(semes, prom)))+
geom_point(size=3, aes(shape=didac, colour=didac))+
geom_segment(aes(yend=semes),xend=0, colour="grey50")+
facet_grid(asign~., scales="free_y", space="free_y")+
theme_bw()+
theme(panel.grid.major.y = element_blank(),
legend.position = c(0.9,0.2),
legend.justification= c(1, 0.5)
)
dat<-read.csv(file.choose(), head=T)
str(dat)
# Las variables categóricas estan representadas en los ejes x y y, el valor de la variable continua se mapea con
# "fill". Se puede usar geom_raster o geom_tile:
ggplot(dat, aes(x=dia, y=compor, fill=total))+
geom_raster()
ggplot(dat, aes(x=dia, y=compor, fill=total))+
geom_tile()
# Para conseguir una mejor separación de los colores en un gradiente se puede cambiar la paleta de colores, pero
# esta debe ser aplicable a una variable continua (no a variables categóricas o grupos).
ggplot(dat, aes(x=dia, y=compor, fill=total))+
geom_raster()+
scale_fill_gradient2(midpoint=200, mid="grey70", limits=c(0,1000))
# Al escoger gradient2 para el gradiente de color, podemos asignar un valor medio y de ahí a los límites inferior
# y superior de rango de valores que toma la variable continuar. Aquí escogimos la mediana como midpoint.
summary(dat$total)
# También se puede escoger gradient (no tiene un midpoint) que solo requiere definir los colores en los extremos del
# gradiente y los límites numericos de los mismos.
ggplot(dat, aes(x=dia, y=compor, fill=total))+
geom_raster()+
scale_fill_gradient(low="lightblue", high="purple", limits=c(0,1000))
dat<-read.csv(file.choose(), head=T)
str(dat)
# I. Para hacer un histrograma a partir de un juego de datos:
# Es posible indicar el nombre del data.frame en el primer argumento, y referir las columnas para mapear los valores
# de las variables x y y; o bien, declarar NULL el primer argumento y referir las columnas con "$nombrecolumna"
ggplot(dat, aes(loc2)) + geom_histogram()
ggplot(NULL, aes(x=dat$loc2)) + geom_histogram()
# Para cambiar el número de intervalos o 'bins'. Si se sigue la regla de Sturges. Para calcular el número de
# intervalos, y luego el tamaño ("binwidth") de cada intervalo aplica
No.intervalos<-round(1 + log(length(dat$loc2), base=2), 0)
tama<-(max(dat$loc2)-min(dat$loc2))/No.intervalos
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=10)
# Para cambiar el número de intervalos o 'bins'. Si se sigue la regla de Sturges. Para calcular el número de
# intervalos, y luego el tamaño ("binwidth") de cada intervalo aplica
No.intervalos<-round(1 + log(length(dat$loc2), base=2), 0)
tama<-(max(dat$loc2)-min(dat$loc2))/No.intervalos
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=10)
# El argumento 'boundary' establece el valor de x donde comienza el primer intervalo, y modificarlo cambia el
# aspecto del histograma.
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=5)
# Para visualizar el área bajo la curva de un histograma se puede adicionar la densidad de probabilidad. La funcion
# 'expand_limits' extiende los valores calculados hasta valores donde y =0:
ggplot(dat, aes(x=loc2)) + geom_line(stat="density")
ggplot(dat, aes(x=loc2)) + geom_line(stat="density") +
expand_limits(y=0)
# Puedes ajustar la suavidad para dibujar la linea:
ggplot(dat, aes(x=loc2)) +
geom_line(stat="density", adjust=.25, colour="red") +
geom_line(stat="density") +
geom_line(stat="density", adjust=2, colour="blue")
# Puedes colocar la linea de densidad sobre las barras del histograma y hacerlo transparente:
ggplot(dat, aes(x=loc2, y=..density..)) +
geom_histogram(binwidth=tama, fill="cornsilk", colour="grey60", size=.2) +
geom_density()
# II. Para hacer dos histrogramas o histogramas condicionales con dos juegos de datos:
# Primero debes generar una tabla con los datos de largo patron en una sola columna y otra con el identificador de
# la localidad de cada juego de datos. Para eso requiere estibar (stack) los datos, guardarlos como data.frame y
# darles encabezados adecuados. El siguiente código hace esto:
tab1<-stack(dat)
names(tab1)<-c("lpatr", "loc")
# Para hacer dos histogramas uno arriba de otro con el eje x alineado:
ggplot(tab1, aes(x=lpatr)) + geom_histogram(binwidth=tama, fill="white", colour="black") +
facet_grid(loc ~ .)
# Para hacer los dos histogramas uno encima del otro, y con rellenos de color distinto pero transparentes:
ggplot(tab1, aes(x=lpatr, fill=loc)) +
geom_histogram(binwidth=tama, position="identity", alpha=0.6)
# Puedes colocar el area bajo la curva de dos histogramas que deseas comparar:
ggplot(tab1, aes(x=lpatr, fill=loc)) + geom_density(alpha=.6)
# III. Para hacer un polígono de frecuencias, se usa 'geom_freqpoly' y también se puede ajustar 'binwidth':
ggplot(dat, aes(x=loc2)) +
geom_freqpoly()
ggplot(dat, aes(x=loc2)) +
geom_freqpoly(binwidth=tama)
ggplot(dat, aes(x=loc2)) +
geom_freqpoly(binwidth=10)
# I. Para hacer un histrograma a partir de un juego de datos:
# Es posible indicar el nombre del data.frame en el primer argumento, y referir las columnas para mapear los valores
# de las variables x y y; o bien, declarar NULL el primer argumento y referir las columnas con "$nombrecolumna"
ggplot(dat, aes(loc2)) + geom_histogram()
ggplot(NULL, aes(x=dat$loc2)) + geom_histogram()
# Para cambiar el número de intervalos o 'bins'. Si se sigue la regla de Sturges. Para calcular el número de
# intervalos, y luego el tamaño ("binwidth") de cada intervalo aplica
No.intervalos<-round(1 + log(length(dat$loc2), base=2), 0)
tama<-(max(dat$loc2)-min(dat$loc2))/No.intervalos
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=10)
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=4)
# El argumento 'boundary' establece el valor de x donde comienza el primer intervalo, y modificarlo cambia el
# aspecto del histograma.
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=5)
# Para visualizar el área bajo la curva de un histograma se puede adicionar la densidad de probabilidad. La funcion
# 'expand_limits' extiende los valores calculados hasta valores donde y =0:
ggplot(dat, aes(x=loc2)) + geom_line(stat="density")
# El argumento 'boundary' establece el valor de x donde comienza el primer intervalo, y modificarlo cambia el
# aspecto del histograma.
ggplot(dat, aes(loc2)) +
geom_histogram(binwidth=tama, fill="white", colour="black", boundary=5)
